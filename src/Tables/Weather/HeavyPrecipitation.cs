using System;
using System.Linq;
using Dworkin.Interfaces;
using Dworkin.Models;

namespace Dworkin.Tables.Weather
{
    public class HeavyPrecipitation : ITable
    {
        private Percentile[] _table = {
            new Percentile(0,19,"Heavy Fog: Heavy Fog: Obscures all vision beyond 5 feet, including darkvision. Creatures 5 feet away have concealment. Heavy fog typically occurs early in the day, late in the day, or sometimes at night, but the heat of the midday usually burns it away. Heavy fog occurs only when there is no or light wind."),
            new Percentile(20,84,"Heavy Rain: Reduces visibility to one-quarter of the normal range, resulting in a –3 penalty on Perception checks. Heavy rain automatically extinguishes unprotected flames and imposes a –3 penalty on ranged attacks."),
            new Percentile(85,99,"Thunderstorm: Features powerful winds and heavy rain (-3 to perception and ranged attacks).\n\nIn addition, there is a 40% chance that a thunderstorm features hail either up to an hour before or during the storm. An even greater danger presented by a thunderstorm is the lightning that occurs during the storm. These electrical discharges, generated by the roiling clouds, can pose a hazard to creatures that do not have proper shelters, especially creatures clad in metal armor. Every 10 minutes during a thunderstorm, a bolt of lightning strikes an unsheltered creature at random (though this can strike wildlife as easily as PCs). A creature struck by this lightning must succeed a DC 18 Dex saving throw or take 10d8 points of electricity damage (a successful saving throw halves the damage). Creatures in metal armor take a Dex saving throw at disadvantage.\n\nThere is a 5% chance that a thunderstorm also generates a tornado, while thunderstorms with in temperatures higher than 30° C also have a 20% chance of being a precursor to a hurricane. There is a 20% chance that a thunderstorm of any strength in a desert also generates a haboob.")
        };

        public HeavyPrecipitation()
        {
            Table = _table;
            Max = _table[_table.Length-1].max;
        }

        public int Max { get; set; }
        public int Min { get; set; }
        public Percentile[] Table { get; set; }
        public Table MainTable { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }

        public string Fetch(int position)
        {
            var response = "";
            foreach (Percentile element in Table)
            {
                if (Enumerable.Range(element.min,element.max).Contains(position))
                    response = element.value;
            }
            return response;
        }
    }
}